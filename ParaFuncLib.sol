pragma solidity ^0.4.15;

/** @title ParaFuncLib -  */
library ParaFuncLib {

    /** @dev Executes a function in the contract by name's reference
      * @param _funcName Name of the function along with `()`
      * @return bool Boolean return state of the FunCaller call
      */
    function ParaFuncExecute(string _funcName) internal returns (bool) {
        return ParaFuncCaller(ParaFuncResolver(_funcName));
    }
    
    /** @dev Resolves the function's hash from ABI by name
      * @param _funcName Name of the function along with `()`. DO NOT CALL DIRECTLY.
      * @return bytes4 returns the signature's head of the specified function
      */
    function ParaFuncResolver(string _funcName) internal returns (bytes4){
        var methodID = bytes4(keccak256(_funcName));
        return methodID;
    }
    
    /** @dev Calls the function by signature ID
      * @param _methodID Passing the signature generated by ParaFuncResolver()
      * @return bool Boolean return state of the FunCaller call      
      */
    function ParaFuncCaller(bytes4 _methodID) internal returns (bool) {
        return this.call(_methodID);
    }

}